eslint - eslint . --ext .js for all files
snyk

check on the client side

erro snippet for volunteer signup

reset data on pages

check that all pages are working

do homepage links

isvolunteer toggle login

remove all console.logs, including public

do pages

new signup + new data

remove or add the listings pictures functionality

csrf for rest

check that all is xss-ed

let users who aren't logged in see listings and listingsPage

+ filter xss client-side - check that all is working

test user signup as well

(show the number of participants in the email?)

show languages and skills and interests in the email

test email verification

bots.txt + get on google

throttling - discuss times and add it to other places

validate target audience

test xss
continue with xss

set non-required fields on signup, too

client side validation

-----
sort out css naming

go over all the TODOs in the files themselves

test charities email verification

test rememberme cookie + duration

test sending multiple emails at once

test production

test charity signup

test verifyEmailToken validate

test filtering xss

email verification tokens in the db instead of cache?

storage for multiple threads

logos and listings pictures

check validation for search page and getListing, signup

tests

redis or memcached for email tokens and caches OR db for email

different port for ssh?

npm audit
snyk test
npx eslint yourfile.js on all files

change uuid structure (e.g. remove the dashes)?

store age groups as an array

limit max searching length

full text search on listings with cache
https://www.npmjs.com/package/flexsearch
https://medium.com/dev-channel/how-to-add-full-text-search-to-your-website-4e9c80ce2bf4

add the listing index on create and remove on destroy

error messages on all pages

tests

check if listings page date is accurate

nginx for TLS

https://expressjs.com/en/advanced/best-practice-performance.html
https://expressjs.com/en/advanced/best-practice-security.html
+ look up additionally

!!!!Create a foreign key in listings on organisations

look at git commands

cache

throttling:The first is number of consecutive failed attempts by the same user name and IP address.
The second is number of failed attempts from an IP address over some long period of time. For example, block an IP address if it makes 100 failed attempts in one day.
+ other actions

a store for throttling data
test it
skipFailedRequests?
skipSuccessfulRequests?

Use csurf middleware to protect against cross-site request forgery (CSRF).
Always filter and sanitize user input to protect against cross-site scripting (XSS) and command injection attacks.
Use the open-source sqlmap tool to detect SQL injection vulnerabilities in your app.
Use the nmap and sslyze tools to test the configuration of your SSL ciphers, keys, and renegotiation as well as the validity of your certificate.

cookie session store?
look at the cookie settings in the other project


automatic backups https://www.jotform.com/blog/how-to-backup-mysql-database/

use layouts?

error handling

page caching

docs

split index.js into files

look into cookie laws

move all js and css into separate files

remove test values from login .js file

CAPTCHA?

!!!! start transaction




-------

replace console.log

-------

ssh root@165.232.38.165

mysql -u root -p
password: <password>

same with serverQueryManager